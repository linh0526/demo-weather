import React, { useState, useEffect } from 'react';
import { Modal, Button, Form, Row, Col, Badge, ListGroup } from 'react-bootstrap';
import './CitySelector.scss';
import WeatherService from '../services/WeatherService';

const CitySelector = ({ show, onHide, onCitySelect, currentCity }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedTab, setSelectedTab] = useState('popular');

  // Danh s√°ch c√°c th√†nh ph·ªë ph·ªï bi·∫øn Vi·ªát Nam
  const popularCities = [
    { name: 'Hanoi', displayName: 'H√† N·ªôi', region: 'Th·ªß ƒë√¥', country: 'Vietnam', flag: 'üèõÔ∏è' },
    { name: 'Ho Chi Minh City', displayName: 'TP. H·ªì Ch√≠ Minh', region: 'Th√†nh ph·ªë tr·ª±c thu·ªôc TW', country: 'Vietnam', flag: 'üåÜ' },
    { name: 'Da Nang', displayName: 'ƒê√† N·∫µng', region: 'Th√†nh ph·ªë tr·ª±c thu·ªôc TW', country: 'Vietnam', flag: 'üåä' },
    { name: 'Hai Phong', displayName: 'H·∫£i Ph√≤ng', region: 'Th√†nh ph·ªë tr·ª±c thu·ªôc TW', country: 'Vietnam', flag: '‚öì' },
    { name: 'Can Tho', displayName: 'C·∫ßn Th∆°', region: 'Th√†nh ph·ªë tr·ª±c thu·ªôc TW', country: 'Vietnam', flag: 'üåæ' },
    { name: 'Nha Trang', displayName: 'Nha Trang', region: 'Kh√°nh H√≤a', country: 'Vietnam', flag: 'üèñÔ∏è' },
    { name: 'Hue', displayName: 'Hu·∫ø', region: 'Th·ª´a Thi√™n Hu·∫ø', country: 'Vietnam', flag: 'üè∞' },
    { name: 'Vung Tau', displayName: 'V≈©ng T√†u', region: 'B√† R·ªãa - V≈©ng T√†u', country: 'Vietnam', flag: 'üèñÔ∏è' },
    { name: 'Da Lat', displayName: 'ƒê√† L·∫°t', region: 'L√¢m ƒê·ªìng', country: 'Vietnam', flag: 'üå≤' },
    { name: 'Quy Nhon', displayName: 'Quy Nh∆°n', region: 'B√¨nh ƒê·ªãnh', country: 'Vietnam', flag: 'üåä' },
    { name: 'Thai Nguyen', displayName: 'Th√°i Nguy√™n', region: 'Th√°i Nguy√™n', country: 'Vietnam', flag: 'üèîÔ∏è' },
    { name: 'Vinh', displayName: 'Vinh', region: 'Ngh·ªá An', country: 'Vietnam', flag: 'üåæ' },
  ];

  // Th√†nh ph·ªë qu·ªëc t·∫ø ph·ªï bi·∫øn
  const internationalCities = [
    { name: 'Bangkok', displayName: 'Bangkok', region: '', country: 'Thailand', flag: 'üáπüá≠' },
    { name: 'Singapore', displayName: 'Singapore', region: '', country: 'Singapore', flag: 'üá∏üá¨' },
    { name: 'Kuala Lumpur', displayName: 'Kuala Lumpur', region: '', country: 'Malaysia', flag: 'üá≤üáæ' },
    { name: 'Jakarta', displayName: 'Jakarta', region: '', country: 'Indonesia', flag: 'üáÆüá©' },
    { name: 'Manila', displayName: 'Manila', region: '', country: 'Philippines', flag: 'üáµüá≠' },
    { name: 'Tokyo', displayName: 'Tokyo', region: '', country: 'Japan', flag: 'üáØüáµ' },
    { name: 'Seoul', displayName: 'Seoul', region: '', country: 'South Korea', flag: 'üá∞üá∑' },
    { name: 'Hong Kong', displayName: 'Hong Kong', region: '', country: 'Hong Kong', flag: 'üá≠üá∞' },
    { name: 'Taipei', displayName: 'Taipei', region: '', country: 'Taiwan', flag: 'üáπüáº' },
    { name: 'Beijing', displayName: 'Beijing', region: '', country: 'China', flag: 'üá®üá≥' },
    { name: 'Sydney', displayName: 'Sydney', region: 'NSW', country: 'Australia', flag: 'üá¶üá∫' },
    { name: 'New York', displayName: 'New York', region: 'NY', country: 'USA', flag: 'üá∫üá∏' },
  ];

  useEffect(() => {
    if (searchTerm.length >= 2) {
      searchCities();
    } else {
      setSearchResults([]);
    }
  }, [searchTerm]);

  const searchCities = async () => {
    setLoading(true);
    try {
      const results = await WeatherService.searchCities(searchTerm);
      setSearchResults(results.slice(0, 10)); // Limit to 10 results
    } catch (error) {
      console.error('Search error:', error);
      setSearchResults([]);
    } finally {
      setLoading(false);
    }
  };

  const handleCitySelect = (city) => {
    onCitySelect(city.name);
    onHide();
    setSearchTerm('');
    setSearchResults([]);
  };

  const formatDisplayName = (city) => {
    if (city.region && city.region !== city.name) {
      return `${city.displayName || city.name}, ${city.region}`;
    }
    return city.displayName || city.name;
  };

  const isCurrentCity = (cityName) => {
    return currentCity && currentCity.toLowerCase() === cityName.toLowerCase();
  };

  return (
    <Modal show={show} onHide={onHide} size="lg" centered className="city-selector-modal">
      <Modal.Header closeButton className="city-selector-header">
        <Modal.Title>
          <i className="fas fa-globe-asia me-2"></i>
          Ch·ªçn Th√†nh Ph·ªë
        </Modal.Title>
      </Modal.Header>
      
      <Modal.Body className="city-selector-body">
        {/* Search Input */}
        <div className="search-section mb-4">
          <Form.Group>
            <div className="search-input-container position-relative">
              <Form.Control
                type="text"
                placeholder="T√¨m ki·∫øm th√†nh ph·ªë tr√™n to√†n th·∫ø gi·ªõi..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
              {loading ? (
                <i className="fas fa-spinner fa-spin search-icon"></i>
              ) : (
                <i className="fas fa-search search-icon"></i>
              )}
            </div>
          </Form.Group>
        </div>

        {/* Search Results */}
        {searchTerm.length >= 2 && (
          <div className="search-results mb-4">
            <h6 className="section-title">
              <i className="fas fa-search me-2"></i>
              K·∫øt qu·∫£ t√¨m ki·∫øm
            </h6>
            {searchResults.length > 0 ? (
              <ListGroup variant="flush">
                {searchResults.map((city, index) => (
                  <ListGroup.Item
                    key={index}
                    action
                    onClick={() => handleCitySelect(city)}
                    className={`search-result-item ${isCurrentCity(city.name) ? 'current-city' : ''}`}
                  >
                    <div className="d-flex justify-content-between align-items-center">
                      <div>
                        <i className="fas fa-map-marker-alt me-2 text-primary"></i>
                        <strong>{city.name}</strong>
                        {city.region && <span className="text-muted ms-1">, {city.region}</span>}
                        <span className="text-muted ms-1">, {city.country}</span>
                      </div>
                      {isCurrentCity(city.name) && (
                        <Badge bg="success">Hi·ªán t·∫°i</Badge>
                      )}
                    </div>
                  </ListGroup.Item>
                ))}
              </ListGroup>
            ) : (
              <div className="no-results text-center py-3">
                <i className="fas fa-search-location fa-2x text-muted mb-2"></i>
                <p className="text-muted mb-0">Kh√¥ng t√¨m th·∫•y th√†nh ph·ªë n√†o</p>
              </div>
            )}
          </div>
        )}

        {/* Tabs */}
        <div className="city-tabs mb-3">
          <Button
            variant={selectedTab === 'popular' ? 'primary' : 'outline-primary'}
            onClick={() => setSelectedTab('popular')}
            className="me-2"
          >
            <i className="fas fa-flag me-1"></i>
            Vi·ªát Nam
          </Button>
          <Button
            variant={selectedTab === 'international' ? 'primary' : 'outline-primary'}
            onClick={() => setSelectedTab('international')}
          >
            <i className="fas fa-globe me-1"></i>
            Qu·ªëc t·∫ø
          </Button>
        </div>

        {/* City Lists */}
        <div className="city-lists">
          {selectedTab === 'popular' && (
            <div className="popular-cities">
              <h6 className="section-title">
                <i className="fas fa-star me-2"></i>
                Th√†nh ph·ªë ph·ªï bi·∫øn - Vi·ªát Nam
              </h6>
              <Row>
                {popularCities.map((city, index) => (
                  <Col lg={6} md={6} sm={12} key={index} className="mb-2">
                    <div
                      className={`city-card ${isCurrentCity(city.name) ? 'current-city' : ''}`}
                      onClick={() => handleCitySelect(city)}
                    >
                      <div className="d-flex align-items-center">
                        <span className="city-flag me-2">{city.flag}</span>
                        <div className="flex-grow-1">
                          <div className="city-name">{city.displayName}</div>
                          <div className="city-region">{city.region}</div>
                        </div>
                        {isCurrentCity(city.name) && (
                          <Badge bg="success" className="ms-2">Hi·ªán t·∫°i</Badge>
                        )}
                      </div>
                    </div>
                  </Col>
                ))}
              </Row>
            </div>
          )}

          {selectedTab === 'international' && (
            <div className="international-cities">
              <h6 className="section-title">
                <i className="fas fa-globe-americas me-2"></i>
                Th√†nh ph·ªë qu·ªëc t·∫ø
              </h6>
              <Row>
                {internationalCities.map((city, index) => (
                  <Col lg={6} md={6} sm={12} key={index} className="mb-2">
                    <div
                      className={`city-card ${isCurrentCity(city.name) ? 'current-city' : ''}`}
                      onClick={() => handleCitySelect(city)}
                    >
                      <div className="d-flex align-items-center">
                        <span className="city-flag me-2">{city.flag}</span>
                        <div className="flex-grow-1">
                          <div className="city-name">{city.displayName}</div>
                          <div className="city-region">{city.country}</div>
                        </div>
                        {isCurrentCity(city.name) && (
                          <Badge bg="success" className="ms-2">Hi·ªán t·∫°i</Badge>
                        )}
                      </div>
                    </div>
                  </Col>
                ))}
              </Row>
            </div>
          )}
        </div>
      </Modal.Body>
    </Modal>
  );
};

export default CitySelector; 